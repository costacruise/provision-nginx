{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Cloud formation script for the creation of nginx static website",

  "Parameters": {
    "WebSiteName": {
      "Description": "The website name",
      "Type": "String",
      "ConstraintDescription": "must match the name of the initial S3 bucket to deploy."
    },
    "GitOrgRepo": {
      "Description": "The Git Organization/Repository, eg 'costacruise/web-costa-de'",
      "Type": "String",
      "ConstraintDescription": "must match the name of the Git Org followed by forward-slash and Git Repo."
    },
    "CircleAPIToken": {
      "Description": "The CircleCI API Token for this CircleCI Project",
      "Type": "String",
      "ConstraintDescription": "must be pre-configured in CircleCI project settings."
    },
    "KeyName": {
      "Description": "The EC2 Key Pair to allow SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "AWSAccessKeyId": {
      "Description": "The AWS access to key to access S3",
      "Type": "String",
      "ConstraintDescription": "must be the access key id of a valid IAM User."
    },
    "AWSSecretAccessKeyId": {
      "Description": "The AWS secret access key id used to access S3",
      "Type": "String",
      "ConstraintDescription": "must be the secret access key id of a valid IAM User."
    },
    "InstanceType": {
      "Description": "WebServer EC2 instance type",
      "Type": "String",
      "Default": "t2.small",
      "AllowedValues": ["t1.micro", "t2.micro", "t2.small", "t2.medium", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "MinSize": {
      "Description": "The minimum number of instances",
      "Type": "Number",
      "Default": 2,
      "MinValue": 2,
      "ConstraintDescription": "must be a number"
    },
    "MaxSize": {
      "Description": "The maximum number of instances",
      "Type": "Number",
      "Default": 2,
      "MinValue": 2,
      "ConstraintDescription": "must be a number"
    }
  },

  "Mappings": {
    "Region2Examples": {
      "us-east-1": {
        "Examples": "https://s3.amazonaws.com/cloudformation-examples-us-east-1"
      },
      "us-west-2": {
        "Examples": "https://s3-us-west-2.amazonaws.com/cloudformation-examples-us-west-2"
      },
      "us-west-1": {
        "Examples": "https://s3-us-west-1.amazonaws.com/cloudformation-examples-us-west-1"
      },
      "eu-west-1": {
        "Examples": "https://s3-eu-west-1.amazonaws.com/cloudformation-examples-eu-west-1"
      },
      "eu-central-1": {
        "Examples": "https://s3-eu-central-1.amazonaws.com/cloudformation-examples-eu-central-1"
      },
      "ap-southeast-1": {
        "Examples": "https://s3-ap-southeast-1.amazonaws.com/cloudformation-examples-ap-southeast-1"
      },
      "ap-northeast-1": {
        "Examples": "https://s3-ap-northeast-1.amazonaws.com/cloudformation-examples-ap-northeast-1"
      },
      "ap-southeast-2": {
        "Examples": "https://s3-ap-southeast-2.amazonaws.com/cloudformation-examples-ap-southeast-2"
      },
      "sa-east-1": {
        "Examples": "https://s3-sa-east-1.amazonaws.com/cloudformation-examples-sa-east-1"
      },
      "cn-north-1": {
        "Examples": "https://s3.cn-north-1.amazonaws.com.cn/cloudformation-examples-cn-north-1"
      }
    },
    "AWSInstanceType2Arch": {
      "t1.micro": {
        "Arch": "PV64"
      },
      "t2.micro": {
        "Arch": "HVM64"
      },
      "t2.small": {
        "Arch": "HVM64"
      },
      "t2.medium": {
        "Arch": "HVM64"
      },
      "m1.small": {
        "Arch": "PV64"
      },
      "m1.medium": {
        "Arch": "PV64"
      },
      "m1.large": {
        "Arch": "PV64"
      },
      "m1.xlarge": {
        "Arch": "PV64"
      },
      "m2.xlarge": {
        "Arch": "PV64"
      },
      "m2.2xlarge": {
        "Arch": "PV64"
      },
      "m2.4xlarge": {
        "Arch": "PV64"
      },
      "m3.medium": {
        "Arch": "HVM64"
      },
      "m3.large": {
        "Arch": "HVM64"
      },
      "m3.xlarge": {
        "Arch": "HVM64"
      },
      "m3.2xlarge": {
        "Arch": "HVM64"
      },
      "c1.medium": {
        "Arch": "PV64"
      },
      "c1.xlarge": {
        "Arch": "PV64"
      },
      "c3.large": {
        "Arch": "HVM64"
      },
      "c3.xlarge": {
        "Arch": "HVM64"
      },
      "c3.2xlarge": {
        "Arch": "HVM64"
      },
      "c3.4xlarge": {
        "Arch": "HVM64"
      },
      "c3.8xlarge": {
        "Arch": "HVM64"
      },
      "c4.large": {
        "Arch": "HVM64"
      },
      "c4.xlarge": {
        "Arch": "HVM64"
      },
      "c4.2xlarge": {
        "Arch": "HVM64"
      },
      "c4.4xlarge": {
        "Arch": "HVM64"
      },
      "c4.8xlarge": {
        "Arch": "HVM64"
      },
      "g2.2xlarge": {
        "Arch": "HVMG2"
      },
      "r3.large": {
        "Arch": "HVM64"
      },
      "r3.xlarge": {
        "Arch": "HVM64"
      },
      "r3.2xlarge": {
        "Arch": "HVM64"
      },
      "r3.4xlarge": {
        "Arch": "HVM64"
      },
      "r3.8xlarge": {
        "Arch": "HVM64"
      },
      "i2.xlarge": {
        "Arch": "HVM64"
      },
      "i2.2xlarge": {
        "Arch": "HVM64"
      },
      "i2.4xlarge": {
        "Arch": "HVM64"
      },
      "i2.8xlarge": {
        "Arch": "HVM64"
      },
      "hi1.4xlarge": {
        "Arch": "HVM64"
      },
      "hs1.8xlarge": {
        "Arch": "HVM64"
      },
      "cr1.8xlarge": {
        "Arch": "HVM64"
      },
      "cc2.8xlarge": {
        "Arch": "HVM64"
      }
    },
    "AWSRegionArch2AMI": {
      "us-east-1": {
        "PV64": "ami-8e682ce6",
        "HVM64": "ami-146e2a7c",
        "HVMG2": "ami-7200461a"
      },
      "us-west-2": {
        "PV64": "ami-9fc29baf",
        "HVM64": "ami-dfc39aef",
        "HVMG2": "ami-0b78203b"
      },
      "us-west-1": {
        "PV64": "ami-f49089b1",
        "HVM64": "ami-42908907",
        "HVMG2": "ami-244b5361"
      },
      "eu-west-1": {
        "PV64": "ami-7b3db00c",
        "HVM64": "ami-9d23aeea",
        "HVMG2": "ami-4d7cf03a"
      },
      "eu-central-1": {
        "PV64": "ami-0600331b",
        "HVM64": "ami-04003319",
        "HVMG2": "NOT_SUPPORTED"
      },
      "ap-northeast-1": {
        "PV64": "ami-3c87993d",
        "HVM64": "ami-18869819",
        "HVMG2": "ami-2e90892f"
      },
      "ap-southeast-1": {
        "PV64": "ami-58ba910a",
        "HVM64": "ami-96bb90c4",
        "HVMG2": "ami-3e78526c"
      },
      "ap-southeast-2": {
        "PV64": "ami-1500742f",
        "HVM64": "ami-d50773ef",
        "HVMG2": "ami-315e2a0b"
      },
      "sa-east-1": {
        "PV64": "ami-fd9925e0",
        "HVM64": "ami-af9925b2",
        "HVMG2": "NOT_SUPPORTED"
      },
      "cn-north-1": {
        "PV64": "ami-8a1d8fb3",
        "HVM64": "ami-981d8fa1",
        "HVMG2": "NOT_SUPPORTED"
      }
    }

  },

  "Resources": {
    "WebServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": {
          "Fn::GetAZs": ""
        },
        "LaunchConfigurationName": {
          "Ref": "LaunchConfig"
        },
        "MinSize": {
          "Ref": "MinSize"
        },
        "MaxSize": {
          "Ref": "MaxSize"
        },
        "LoadBalancerNames": [{
          "Ref": "ElasticLoadBalancer"
        }],
        "Tags": [{
          "PropagateAtLaunch" : "true",
          "Key": "WebSiteName",
          "Value": {
            "Ref": "WebSiteName"
          }
        }, {
          "PropagateAtLaunch" : "true",
          "Key": "Purpose",
          "Value": "Webserver"
        }]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT15M",
          "Count": "1"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime": "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },

    "LaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "Comment": "Install a simple application",
        "AWS::CloudFormation::Init": {
          "config": {
            "packages": {
              "yum": {
                "awslogs" : [],
                "aws-cli-plugin-cloudwatch-logs": [],
                "jq": [],
                "nginx": []
              }
            }
          }
        }
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": ["AWSRegionArch2AMI", {
            "Ref": "AWS::Region"
          }, {
            "Fn::FindInMap": ["AWSInstanceType2Arch", {
              "Ref": "InstanceType"
            }, "Arch"]
          }]
        },
        "SecurityGroups": [{
          "Ref": "InstanceSecurityGroup"
        }],
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": ["", [
              "#!/bin/bash -xe\n",
              "exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n",
              "yum update -y aws-cfn-bootstrap\n",

              "/opt/aws/bin/cfn-init -v ",
              "         --stack ", {
                "Ref": "AWS::StackName"
              },
              "         --resource LaunchConfig ",
              "         --region ", {
                "Ref": "AWS::Region"
              }, "\n",

              "echo '* hard nofile 100000' | tee -a /etc/security/limits.conf\n",
              "echo '* soft nofile 100000' | tee -a /etc/security/limits.conf\n",
              "ulimit -n 100000\n",

              "mkdir /www\n",
              "mkdir /www/origin\n",
              "mkdir ~/.aws\n",

              "echo '[default]' > ~/.aws/credentials\n",
              "echo 'aws_access_key_id=", { "Ref": "AWSAccessKeyId" },"' >> ~/.aws/credentials\n",
              "echo 'aws_secret_access_key=", { "Ref": "AWSSecretAccessKeyId" },"' >> ~/.aws/credentials\n",
              "export BUILD=$(curl -sL 'https://circleci.com/api/v1/project/",{ "Ref" :"GitOrgRepo" },"/tree/master?circle-token=",{ "Ref": "CircleAPIToken" },"&filter=successful&limit=1' -H 'accept: application/json' | jq '.[0].build_num')\n",
              "aws s3 sync s3://", {
                "Ref": "WebSiteName"
              }, "/$BUILD/ /www/origin --delete\n",

              "echo '[general]' > /etc/awslogs/awslogs.conf\n",
              "echo 'state_file = /etc/awslogs/agent-state' >> /etc/awslogs/awslogs.conf\n",
              "echo '[/var/log/nginx/access.log]' >> /etc/awslogs/awslogs.conf\n",
              "echo 'datetime_format = %b %d %H:%M:%S' >> /etc/awslogs/awslogs.conf\n",
              "echo 'file = /var/log/nginx/access.log' >> /etc/awslogs/awslogs.conf\n",
              "echo 'buffer_duration = 5000' >> /etc/awslogs/awslogs.conf\n",
              "echo 'log_stream_name = nginx-access' >> /etc/awslogs/awslogs.conf\n",
              "echo 'initial_position = start_of_file' >> /etc/awslogs/awslogs.conf\n",
              "echo 'log_group_name = ", { "Ref": "WebSiteName" } ,"' >> /etc/awslogs/awslogs.conf\n",
              "echo '[/var/log/nginx/error.log]' >> /etc/awslogs/awslogs.conf\n",
              "echo 'datetime_format = %b %d %H:%M:%S' >> /etc/awslogs/awslogs.conf\n",
              "echo 'file = /var/log/nginx/error.log' >> /etc/awslogs/awslogs.conf\n",
              "echo 'buffer_duration = 5000' >> /etc/awslogs/awslogs.conf\n",
              "echo 'log_stream_name = nginx-errors' >> /etc/awslogs/awslogs.conf\n",
              "echo 'initial_position = start_of_file' >> /etc/awslogs/awslogs.conf\n",
              "echo 'log_group_name = ", { "Ref": "WebSiteName" } ,"' >> /etc/awslogs/awslogs.conf\n",

              "echo '[plugins]' > /etc/awslogs/awscli.conf\n",
              "echo 'cwslogs = cwslogs' >> /etc/awslogs/awscli.conf\n",
              "echo '[default]' >> /etc/awslogs/awscli.conf\n",
              "echo 'region = eu-west-1' >> /etc/awslogs/awscli.conf\n",

              "aws s3 cp s3://web-costa-de-routing/awscli.conf /etc/awslogs/awscli.conf\n",

              "aws s3 cp s3://web-costa-de-routing/etc/nginx/conf.d/gzip.conf /etc/nginx/conf.d/gzip.conf\n",
              "aws s3 cp s3://web-costa-de-routing/etc/nginx/static-cache.conf /etc/nginx/static-cache.conf\n",
              "aws s3 cp s3://web-costa-de-routing/etc/nginx/nginx.conf /etc/nginx/nginx.conf\n",

              "rm -rf /usr/share/nginx/html\n",
              "ln -s /www/origin /usr/share/nginx/html\n",

              "service awslogs start\n",
              "service nginx start\n",

              "chkconfig awslogs on\n",
              "chkconfig nginx on\n",

              "/opt/aws/bin/cfn-signal -e $? ",
              "         --stack ", {
                "Ref": "AWS::StackName"
              },
              "         --resource WebServerGroup ",
              "         --region ", {
                "Ref": "AWS::Region"
              }, "\n"
            ]]
          }
        }
      }
    },

    "ElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "AvailabilityZones": {
          "Fn::GetAZs": ""
        },
        "CrossZone": "true",
        "Listeners": [{
          "LoadBalancerPort": "80",
          "InstancePort": "80",
          "Protocol": "HTTP"
        }],
        "HealthCheck": {
          "Target": "HTTP:80/",
          "HealthyThreshold": "3",
          "UnhealthyThreshold": "5",
          "Interval": "30",
          "Timeout": "5"
        }
      }
    },

    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH access and HTTP",
        "SecurityGroupIngress": [{
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "CidrIp": "0.0.0.0/0"
        }, {
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "CidrIp": "0.0.0.0/0"
        }]
      }
    }
  },

  "Outputs": {
    "URL": {
      "Description": "The URL of the website",
      "Value": {
        "Fn::Join": ["", ["http://", {
          "Fn::GetAtt": ["ElasticLoadBalancer", "DNSName"]
        }]]
      }
    }
  }
}
